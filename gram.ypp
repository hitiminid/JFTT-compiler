%{
  // code
  // #include <stdio.h>
  // #include <stdlib.h>
  #include <cstdlib>
  #include <iostream>

  #include <string>
  #include <map>
  #include <stdio.h>
  #include <stdlib.h>

  extern "C" int yylex();
  extern "C" int yyparse();

  // variables

  /*===================================================*/
  /*                     STRUCTURES                    */
  /*===================================================*/

  /* declaredVariables */
  /* (name :: string, adress :: int) */
  std::map<std::string, int> variablesMap;

  /* each initialized variable */
  /* (name :: string, isInitialized :: boolean) */
  std::map<std::string, int> initializedVariablesMap;

  /* each array's size */
  /* if a variable is in here then it's an array - useful when determining type of a data*/
  /* (name :: string, arraySize :: int) */
  std::map<std::string, int> arraysMap;


  // int yylex();
  void yyerror (char* msg);

  /*===================================================*/
  /*                      FUNCTIONS                    */
  /*===================================================*/

  // used for declaring a variable
  void declareAVariable(std::string name);
  // used for declaring an array
  void declareAnArray(std::string name, int arraySize);

  // function used for determining whether variable is declared
  int isVariableAlreadyDeclared(std::string name);


  // debug function performed at the end of parsing
  void finish();


  void displayMap(std::map<std::string, int>* mapToDisplay);



%}

%union {
    char* string;
    int   num;
}

// program structure
%token VAR BEG END
// control statements
%token IF THEN ELSE ENDIF
//while loop
%token WHILE DO ENDWHILE
// for loop
%token FOR FROM TO ENDFOR DOWNTO
// IO
%token READ WRITE
// compare statements
%token ASSGN EQ NEQ GT GE LT LE
// operations
%token ADD SUB MUL DIV MOD
// numbers and variables
%token <num> num
%token <string> PID
%token SEM
// right and left brackets used for arrays
%token LEFT_BR RIGHT_BR


%left '-' '+'
%left '*' '/'
// where is modulo ???
%right '^' // do I need it?

%%

program         : VAR vdeclarations BEG commands END {
                  finish();
                }

vdeclarations   : vdeclarations  PID {
                  declareAVariable($2);
                }

                | vdeclarations  PID LEFT_BR num RIGHT_BR {
                  declareAnArray($2, $4);
                }
                | {
                  std::cout << "No variables declared" << "\n";
                }

commands     : commands  command { }
             | command           { }


command      :
identifier  ASSGN  expression SEM {

}
             | IF  condition  THEN  commands  ELSE  commands  ENDIF
             | IF  condition  THEN  commands  ENDIF
             | WHILE  condition  DO  commands  ENDWHILE
             | FOR  PID  FROM  value TO  value DO  commands  ENDFOR
             | FOR  PID  FROM  value  DOWNTO  value DO  commands  ENDFOR
             | READ  identifier SEM {

             }
             | WRITE  value SEM {

             }

expression   : value
             | value ADD value
             | value SUB value
             | value MUL value
             | value DIV value
             | value MOD value

condition    : value EQ value
             | value NEQ value
             | value LT  value
             | value GT  value
             | value LE  value
             | value GE  value

value        : num
             | identifier {   }

identifier   : PID
             | PID LEFT_BR PID RIGHT_BR
             | PID LEFT_BR num RIGHT_BR

%%

void declareAVariable(std::string name) {
  std::cout << "Declaring new variable: " << name << "\n";
  variablesMap[name] = 0;
/*
1) sprawdz czy zmienna jest juz zadeklarowan
2a) jesli jest to zwroc blad
2b) jesli nie to wrzuc do tablicy symboli
*/
}

void declareAnArray(std::string name, int arraySize) {
  std::cout << "Declaring new array: " << name << " of size: " << arraySize << "\n";

}

int isVariableAlreadyDeclared(std::string name) {

  //

}

void finish() {
  std::cout << " map size: " << variablesMap.size() << "\n";
  displayMap(&variablesMap);
}

void displayMap(std::map<std::string, int>* mapToDisplay) {
  for(auto elem : *mapToDisplay)
  {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

int main() {
  yyparse();
  return 0;
}

void yyerror (char *msg) {
    printf("ERROR\n");
}
