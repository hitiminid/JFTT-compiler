%{

  #include <cstdlib>
  #include <iostream>
  #include <algorithm>
  #include <cstring>
  #include <string>
  #include <map>
  #include <stack>
  #include <vector>
  #include <stdio.h>
  #include <stdlib.h>

  extern "C" int yylex();
  extern "C" int yyparse();

  extern int yylineno;

  /*===================================================*/
  /*                      CONSTANTS                    */
  /*===================================================*/

  #define NUMBER_OF_LAST_RESERVED_MEMORY_INDEX 10
  #define ARRAY_INDEX_OFFSET 1
  #define JUMP_PLACEHOLDER_ADDRESS -3000
  #define ELSE_PLACEHOLDER_ADDRESS -5000

  /*===================================================*/
  /*                      VARIABLES                    */
  /*===================================================*/

  long long currentMemoryIndex = NUMBER_OF_LAST_RESERVED_MEMORY_INDEX;
  long long numberOfCommands   = 0;


  long long equationElementAddress;
  long long firstElementAddress;
  long long secondElementAddress;
  long long arrayIdentifierAddress;
  long long firstArrayIdentifierAddress;
  long long arrayIndexOfFirstElement;


  std::string variableNameGlobal;
  std::string firstElementName;

  bool isDebugOn = false;

  long long currentArrayIndex;
  long long currentArrayIndex_assign;
  long long currentArrayAssignAddress;

  long long iteratorsAddress;


  std::string valueFormat1;
  std::string valueFormat2;
  std::string expressionType[2];
  std::string expressionType2[2];

  /*===================================================*/
  /*                     STRUCTURES                    */
  /*===================================================*/
  std::vector<std::string> currentlyUsedIterators;
	std::vector<std::string> commandsVector;
  std::map<std::string, long long> variablesAddressesMap;
  std::map<std::string, bool> initializedVariablesMap;
  std::map<std::string, long long> arraysMap;
  std::stack<std::pair<int, int>> jumpStack;
  std::stack<int> returnStack;
  std::stack<int> elseStack;
  std::stack<long long> forStack;


  /*===================================================*/
  /*                      FUNCTIONS                    */
  /*===================================================*/

  void yyerror (char* msg);

  void declareAVariable(std::string name);
  void declareAnArray(std::string name, long long arraySize);

  bool isVariableDeclared(std::map<std::string, long long> *mapToSearch, std::string name);
  bool isVariableInitialized(std::map<std::string, bool>* initializedMap, std::string variableName);


  void displayMap(std::map<std::string, int>* mapToDisplay);
  void displayInitializedMap(std::map<std::string, bool>* map);
  void displayCommandVector(std::vector<std::string>* commandsVector);

  void pushCodeWithAddress(std::string opCode, int number);
  void pushCode(std::string opCode);

  void generateNumber(std::string);
  long long computeRequiredMemoryCell(std::string variableName, long long currentArrayIndex);

  std::string determineDataType(std::string, std::string);
  void changeJumpValue();

  void changeJumpValue(int value);
  void changeJumpValueForLoop();
  void changeElseValue(int value);

  void setEquationAttributes();

  std::vector<long long> getBinaryRepresentation(long long decimalNumber);

  void performMultiplicationWithNumber(std::string, long long);
  void performMultiplication();

  void performMODOrDIV();

  void computeElementsForEQAndNEQ(
     std::string firstType,  long long firstElementAddress,  std::string firstElementName,  long long arrayIndexOfFirstElement,  long long firstArrayIdentifierAddress,
     std::string secondType, long long secondElementAddress, std::string secondElementName, long long arrayIndexOfSecondElement, long long secondArrayIdentifierAddress);

   void performDataAssignForDIVAndMOD(
     std::string firstType,  long long firstElementAddress,  std::string firstElementName,  long long arrayIndexOfFirstElement, long long firstArrayIdentifierAddress,
     std::string secondType, long long secondElementAddress, std::string secondElementName, long long currentArrayIndex,        long long secondArrayIdentifierAddress);

   void finish();


%}

%union {
    char* string;
    long long num;
}

%token VAR BEG END
%token IF THEN ELSE ENDIF
%token WHILE DO ENDWHILE
%token FOR FROM TO ENDFOR DOWNTO
%token READ WRITE
%token ASSGN EQ NEQ GT GE LT LE
%token ADD SUB MUL DIV MOD
%token <string> num
%token <string> PID
%token SEM
%token LEFT_BR RIGHT_BR

%left '-' '+'
%left '*' '/' '%'

%%

program         : VAR  vdeclarations  BEG commands END {
                  finish();
                }

vdeclarations   : vdeclarations  PID {
                  declareAVariable($2);
                }
                | vdeclarations  PID LEFT_BR num RIGHT_BR {
                  long long arraySize = atoll($4);
                  declareAnArray($2, arraySize);
                }
                | { }
;

commands     : commands  command { }
             | command           { }
;

command      : identifier {
                expressionType[0]         = valueFormat1;
                expressionType[1]         = valueFormat2;
                currentArrayIndex_assign  = currentArrayIndex;
                currentArrayAssignAddress = arrayIdentifierAddress;

              } ASSGN expression SEM {

                std::string variableName = $<string>1;
                long long addressToAssign;

                if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Variable '" << $<string>1 <<"' not declared!" << "\n";
                  exit(1);
                } else {

                  if(std::find(currentlyUsedIterators.begin(), currentlyUsedIterators.end(), variableName) != currentlyUsedIterators.end()) {
                    std::cerr << "Error [line "<< yylineno <<  "]: " << "Trying to modify iterator '"<< variableName << "' - this action is prohibited!\n";
                    exit(1);
                  }

                  long long variableAddress = variablesAddressesMap[variableName];

                  if (expressionType[1] == "array") {

                    long long arraySize = arraysMap[variableName];

                    if (expressionType[0] == "array") {
                      pushCodeWithAddress("STORE", 7);
                      pushCodeWithAddress("LOAD",  currentArrayAssignAddress);
                      pushCodeWithAddress("STORE", 8);

                      pushCodeWithAddress("LOAD",  variableAddress);
                      pushCodeWithAddress("ADD",   8);
                      pushCodeWithAddress("STORE", 1);

                      pushCodeWithAddress("LOAD",   7);
                      pushCodeWithAddress("STOREI", 1);

                    } else {

                      if (currentArrayIndex < 0 || currentArrayIndex >= arraySize) {
                        std::cerr << "Error [line "<< yylineno <<  "]: " << "IndexArrayOutOfBoundsException: array " << variableName << " has size: " << arraySize << ", tried to access index " << currentArrayIndex << "\n";
                        exit(1);
                      }
                      addressToAssign = variableAddress + currentArrayIndex_assign + 1;
                      pushCodeWithAddress("STORE", addressToAssign);

                    }
                  } else {
                    initializedVariablesMap[variableName] = true;
                    addressToAssign = variableAddress;
                    pushCodeWithAddress("STORE", addressToAssign);
                  }
                }
             }
             | IF  condition THEN commands {


             } ELSE {
               pushCodeWithAddress("JUMP", ELSE_PLACEHOLDER_ADDRESS);
               changeJumpValue();

            } commands {
              elseStack.emplace(numberOfCommands);

            } ENDIF {
              std::stack<std::pair<int, int>> tempStack = jumpStack;

              for (int i = 0; i < jumpStack.size(); i++) {
                std::pair<int,int> topElement = tempStack.top();
                tempStack.pop();
              }

              int returnA = elseStack.top();
              elseStack.pop();
              changeElseValue(returnA);
            }

             | IF condition  THEN  commands  ENDIF {
               changeJumpValue();
             }

             | WHILE {
               returnStack.emplace(numberOfCommands);
             } condition DO commands ENDWHILE {
                long long returnAddress = returnStack.top();
                returnStack.pop();
                pushCodeWithAddress("JUMP", returnAddress);
                changeJumpValue();
             }
             | FOR PID FROM value TO {
               std::string iteratorsName = $2;

               if (isVariableDeclared(&variablesAddressesMap, iteratorsName)) {
                 std::cerr << "Error [line "<< yylineno <<  "]: '"<< iteratorsName << "' has been previously used in program! \n";
                 exit(1);
               } else {
                 declareAVariable(iteratorsName);
                 declareAVariable(iteratorsName+"#1");
                 initializedVariablesMap[iteratorsName] = true;
                 currentlyUsedIterators.push_back(iteratorsName);
               }

               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);

               if (type == "number") {
                 pushCodeWithAddress("STORE", variablesAddressesMap[$2]);
               }
             } value {

               secondElementAddress                   = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName          = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               iteratorsAddress = variablesAddressesMap[$2];
               std::string rightIteratorsBoundName = $2;
               rightIteratorsBoundName = rightIteratorsBoundName + "#1";
               long long secondIteratorsAddress = variablesAddressesMap[rightIteratorsBoundName];

               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("STORE", secondIteratorsAddress);

               } else if (types[0] == "number" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  secondElementAddress);
                 pushCodeWithAddress("STORE", secondIteratorsAddress);

               } else if (types[0] == "variable" && types[1] == "number") {

                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "number") {

                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);


              } else if (types[0] == "number" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD",  secondElementAddress  + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "array" && types[1] == "variable") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "array" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOADI", 1);

                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "array" && types[1] == "number") {


                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

              } else if (types[0] == "array" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);


              } else if (types[0] == "number" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", secondIteratorsAddress);


              } else if (types[0] == "variable" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "variable" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "variable") {

                pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD", secondElementAddress);
                pushCodeWithAddress("LOAD", secondIteratorsAddress);

              } else if (types[0] == "variable" && types[1] == "variable") {

                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress);
                pushCodeWithAddress("STORE", secondIteratorsAddress);
              }
              forStack.emplace(iteratorsAddress);

            } DO {
              returnStack.emplace(numberOfCommands);
              int address = forStack.top();

              pushCodeWithAddress("LOAD", address);
              pushCodeWithAddress("SUB",  address + 1);

              pushCodeWithAddress("JZERO", numberOfCommands + 2);
              pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);

             } commands ENDFOR {

              pushCodeWithAddress("LOAD",  forStack.top());
              pushCode("INC");
              pushCodeWithAddress("STORE", forStack.top());

              int returnAddress = returnStack.top();
              returnStack.pop();
              pushCodeWithAddress("JUMP", returnAddress);
              changeJumpValue();
              forStack.pop();

              std::string firstIterator  = $2;
              std::string secondIterator = $2;
              secondIterator = secondIterator + "#1";

              variablesAddressesMap.erase(firstIterator);
              initializedVariablesMap.erase(firstIterator);

              variablesAddressesMap.erase(secondIterator);
              initializedVariablesMap.erase(secondIterator);

              std::vector<std::string>::iterator position = std::find(currentlyUsedIterators.begin(), currentlyUsedIterators.end(), firstIterator);
              if (position != currentlyUsedIterators.end()) {
                currentlyUsedIterators.erase(position);
              }
             }

             | FOR PID FROM value DOWNTO {

               std::string iteratorsName = $2;
               if (isVariableDeclared(&variablesAddressesMap, iteratorsName)) {
                 std::cerr << "[#" << yylineno << "] '" << iteratorsName << "' has been used previously in program! \n";
                 exit(1);
               } else {
                 declareAVariable(iteratorsName);
                 declareAVariable(iteratorsName+"#1");
                 initializedVariablesMap[iteratorsName] = true;
                 currentlyUsedIterators.push_back(iteratorsName);
               }

               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);

               if (type == "number") {
                 pushCodeWithAddress("STORE", variablesAddressesMap[$2]);
               }
             } value {

               secondElementAddress             = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName    = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               iteratorsAddress = variablesAddressesMap[$2];
               std::string rightIteratorsBoundName = $2;
               rightIteratorsBoundName = rightIteratorsBoundName + "#1";
               long long secondIteratorsAddress = variablesAddressesMap[rightIteratorsBoundName];

               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("STORE", secondIteratorsAddress);

               } else if (types[0] == "number" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  secondElementAddress);
                 pushCodeWithAddress("STORE", secondIteratorsAddress);

               } else if (types[0] == "variable" && types[1] == "number") {

                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "number") {

                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);


              } else if (types[0] == "number" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD",  secondElementAddress  + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "array" && types[1] == "variable") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "array" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOADI", 1);

                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "array" && types[1] == "number") {

                pushCodeWithAddress("STORE", secondIteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

              } else if (types[0] == "array" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "number" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", secondIteratorsAddress);


              } else if (types[0] == "variable" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 10);
                pushCodeWithAddress("LOADI", 10);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "variable" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", secondIteratorsAddress);

              } else if (types[0] == "arrayVar" && types[1] == "variable") {

                pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD", secondElementAddress);
                pushCodeWithAddress("LOAD", secondIteratorsAddress);

              } else if (types[0] == "variable" && types[1] == "variable") {

                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", iteratorsAddress);

                pushCodeWithAddress("LOAD",  secondElementAddress);
                pushCodeWithAddress("STORE", secondIteratorsAddress);
              }
              forStack.emplace(iteratorsAddress);

            } DO {

              returnStack.emplace(numberOfCommands);
              long long address = forStack.top();

              pushCodeWithAddress("LOAD", address + 1);
              pushCodeWithAddress("SUB",  address);

              pushCodeWithAddress("JZERO", numberOfCommands + 2);
              pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);

            } commands ENDFOR {

              pushCodeWithAddress("LOAD",  forStack.top());
              pushCodeWithAddress("JZERO", numberOfCommands + 4);
              pushCode("DEC");
              pushCodeWithAddress("STORE", forStack.top());

              long long returnAddress = returnStack.top();
              returnStack.pop();
              pushCodeWithAddress("JUMP", returnAddress);
              changeJumpValue();

              forStack.pop();

              std::string firstIterator  = $2;
              std::string secondIterator = $2;
              secondIterator = secondIterator + "#1";

              variablesAddressesMap.erase(firstIterator);
              initializedVariablesMap.erase(firstIterator);

              variablesAddressesMap.erase(secondIterator);
              initializedVariablesMap.erase(secondIterator);

              std::vector<std::string>::iterator position = std::find(currentlyUsedIterators.begin(), currentlyUsedIterators.end(), firstIterator);
              if (position != currentlyUsedIterators.end()) {
                currentlyUsedIterators.erase(position);
              }
             }

             | READ  identifier SEM {

               std::string variableName = $<string>2;

               if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                 std::cerr << "Error [line "<< yylineno <<  "]: " << "Variable '"<< $<string>2 <<"' not declared! #READ" << "\n";
                 exit(1);
               } else {

                 long long variableAddress = variablesAddressesMap[variableName];
                 pushCode("ZERO");
                 pushCode("GET");

                 if (isVariableDeclared(&arraysMap, variableName)) {
                    long long requiredCell;
                    if (valueFormat1 == "number") {

                     requiredCell = computeRequiredMemoryCell(variableName, currentArrayIndex);
                     pushCodeWithAddress("STORE", requiredCell);

                   } else {

                     pushCodeWithAddress("STORE", 0);

                     pushCodeWithAddress("LOAD", variablesAddressesMap[variableName]);
                     pushCodeWithAddress("ADD",  arrayIdentifierAddress);
                     pushCodeWithAddress("STORE", 1);

                     pushCodeWithAddress("LOAD",  0);
                     pushCodeWithAddress("STOREI", 1);
                   }
                 } else {
                   long long variableAddress = variablesAddressesMap[variableName];

                   pushCodeWithAddress("STORE", variableAddress);
                   initializedVariablesMap[variableName] = true;
                 }
               }
             }
             | WRITE value SEM {

               std::string variableName = $<string>2;

               if (valueFormat1 == "number" && valueFormat2 == "number") {
                 pushCode("PUT");
               } else if (isVariableDeclared(&variablesAddressesMap, variableName)) {

                 long long variableAddress = variablesAddressesMap[variableName];

                 if (valueFormat2 != "array" && !isVariableInitialized(&initializedVariablesMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Variable " << variableName << " not initialized\n";
                  exit(1);
                } else {

                  if (isVariableDeclared(&arraysMap, variableName)) {
                    if (valueFormat1 == "number") {
                      long long arraySize = arraysMap[variableName];

                      if (currentArrayIndex < 0 || currentArrayIndex >= arraySize) {
                        std::cerr << "[ERROR] IndexArrayOutOfBoundsException: array " << variableName << " is size: " << arraySize << ", tried to access index " << currentArrayIndex << "\n";
                        exit(1);
                      }

                      pushCodeWithAddress("LOAD", variableAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                      pushCode("PUT");

                    } else {

                      pushCodeWithAddress("LOAD", variablesAddressesMap[variableName]);
                      pushCodeWithAddress("ADD",  arrayIdentifierAddress);
                      pushCodeWithAddress("STORE", 0);
                      pushCodeWithAddress("LOADI", 0);
                      pushCode("PUT");

                    }
                  } else {

                    pushCodeWithAddress("LOAD", variableAddress);
                    pushCode("PUT");
                  }
                }
               } else {
                 std::cerr << "Error [line "<< "]: Variable "<< $<string>2 <<" not declared! #WRITE" << "\n";
                 exit(1);
               }
             }
;
expression   : value {

                if (valueFormat1 == "number" && valueFormat2 == "number") {

                } else if (valueFormat1 == "variable" && valueFormat2 == "variable") {
                  pushCode("ZERO");
                  pushCodeWithAddress("LOAD", equationElementAddress);
                } else if (valueFormat1 == "number" && valueFormat2 == "array") {

                } else if (valueFormat1 == "array" && valueFormat2 == "array"){

                }
              }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 0);
               }
             }
             ADD value {

              secondElementAddress                   = equationElementAddress;
              long long secondArrayIdentifierAddress = arrayIdentifierAddress;
              std::string secondElementName          = variableNameGlobal;

              std::string variableTypes[4];
              variableTypes[0] = expressionType[0];
              variableTypes[1] = expressionType2[0];
              variableTypes[2] = valueFormat1;
              variableTypes[3] = valueFormat2;

              std::string types[2];
              types[0] = determineDataType(variableTypes[0], variableTypes[1]);
              types[1] = determineDataType(variableTypes[2], variableTypes[3]);

              if (types[0] == "number" && types[1] == "number") {

                pushCodeWithAddress("ADD",   0);

              } else if (types[0] == "number" && types[1] == "variable") {

                pushCodeWithAddress("LOAD", secondElementAddress);
                pushCodeWithAddress("ADD",  0);

              } else if (types[0] == "variable" && types[1] == "number") {

                pushCodeWithAddress("STORE", 0);
                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("ADD",   0);

              } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("ADD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);

              } else if (types[0] == "arrayVar" && types[1] == "number") {

                pushCodeWithAddress("STORE", 0);
                pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("ADD",   0);

              } else if (types[0] == "number" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("ADD",  0);

              } else if (types[0] == "array" && types[1] == "variable") {

                pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);
                pushCodeWithAddress("ADD", secondElementAddress);

              } else if (types[0] == "variable" && types[1] == "array") {

                pushCodeWithAddress("LOAD", firstElementAddress);
                pushCodeWithAddress("STORE", 0);
                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);
                pushCodeWithAddress("ADD",   0);

              } else if (types[0] == "array" && types[1] == "array") {

                pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);
                pushCodeWithAddress("STORE", 3);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 4);
                pushCodeWithAddress("LOADI", 4);

                pushCodeWithAddress("ADD", 3);

              } else if (types[0] == "array" && types[1] == "number") {

                pushCodeWithAddress("STORE", 0);
                pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",  arrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);
                pushCodeWithAddress("ADD", 0);

              } else if (types[0] == "array" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);
                pushCodeWithAddress("ADD", secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);

              } else if (types[0] == "number" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);

                pushCodeWithAddress("ADD", 0);

              } else if (types[0] == "arrayVar" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("STORE", 0);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 3);
                pushCodeWithAddress("LOADI", 3);
                pushCodeWithAddress("ADD",   0);

              } else if (types[0] == "variable" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", firstElementAddress);
                pushCodeWithAddress("ADD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);

              } else if (types[0] == "arrayVar" && types[1] == "variable") {

                pushCodeWithAddress("LOAD", firstElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("ADD",  secondElementAddress);

              } else if (types[0] == "variable" && types[1] == "variable") {

                pushCodeWithAddress("LOAD", firstElementAddress);
                pushCodeWithAddress("STORE", 0);
                pushCodeWithAddress("LOAD", secondElementAddress);
                pushCodeWithAddress("ADD", 0);

              }
             }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 0);
               }

             } SUB value {

               secondElementAddress                   = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName          = variableNameGlobal;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);


               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOAD",  0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "number" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOAD",  0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "variable" && types[1] == "number") {

                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOAD",  firstElementAddress);
                  pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOAD",  firstElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "number" && types[1] == "arrayVar") {

                 pushCodeWithAddress("STORE", 0);
                 pushCodeWithAddress("SUB",   secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "array" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("SUB",   secondElementAddress);

               } else if (types[0] == "array" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 1);

                 pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 0);
                 pushCodeWithAddress("LOADI", 0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "array" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 0);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   arrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("SUB",   0);

               } else if (types[0] == "array" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 0);
                 pushCodeWithAddress("LOADI", 0);
                 pushCodeWithAddress("SUB", secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "number" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 1);

                 pushCodeWithAddress("LOAD",  0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "variable" && types[1] == "array") {

                 pushCodeWithAddress("LOAD", firstElementAddress);
                 pushCodeWithAddress("STORE", 0);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 1);

                 pushCodeWithAddress("LOAD",  0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "arrayVar" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 1);

                 pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "variable" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  firstElementAddress);
                 pushCodeWithAddress("STORE", 0);
                 pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOAD",  0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "arrayVar" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  secondElementAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOAD",  firstElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("STORE", 0);
                 pushCodeWithAddress("LOAD",  0);
                 pushCodeWithAddress("SUB",   1);

               } else if (types[0] == "variable" && types[1] == "variable") {
                pushCodeWithAddress("LOAD",  firstElementAddress);
                pushCodeWithAddress("STORE", 0);
                pushCodeWithAddress("LOAD",  secondElementAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOAD",  0);
                pushCodeWithAddress("SUB",  1);

               }
             }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }

             } MUL value {

               secondElementAddress                   = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName          = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);
                 performMultiplicationWithNumber($<string>1, 3);

               } else if (types[0] == "number" && types[1] == "variable") {

                  performMultiplicationWithNumber($<string>1, secondElementAddress);

               } else if (types[0] == "variable" && types[1] == "number") {

                  performMultiplicationWithNumber($<string>4, firstElementAddress);

                } else if (types[0] == "number" && types[1] == "arrayVar") {

                  performMultiplicationWithNumber($<string>1, secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

                } else if (types[0] == "arrayVar" && types[1] == "number") {

                  performMultiplicationWithNumber($<string>4, firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);

                } else if (types[0] == "number" && types[1] == "array") {
                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOADI", 1);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplicationWithNumber($<string>1, 3);

                } else if (types[0] == "array" && types[1] == "number") {

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                  pushCodeWithAddress("ADD",   arrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOADI", 1);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplicationWithNumber($<string>4, 3);

                } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {
                  pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD", secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "array" && types[1] == "variable") {

                  pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                  pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 3);
                  pushCodeWithAddress("LOADI", 3);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD", secondElementAddress);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "array" && types[1] == "array") {

                  pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                  pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 3);
                  pushCodeWithAddress("LOADI", 3);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 3);
                  pushCodeWithAddress("LOADI", 3);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "array" && types[1] == "arrayVar") {

                  pushCodeWithAddress("LOAD", variablesAddressesMap[firstElementName]);
                  pushCodeWithAddress("ADD",  firstArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 3);
                  pushCodeWithAddress("LOADI", 3);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD", secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "variable" && types[1] == "array") {

                  pushCodeWithAddress("LOAD", firstElementAddress);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 3);
                  pushCodeWithAddress("LOADI", 3);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "arrayVar" && types[1] == "array") {

                  pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 3);
                  pushCodeWithAddress("LOADI", 3);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "variable" && types[1] == "arrayVar") {

                  pushCodeWithAddress("LOAD", firstElementAddress);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD", secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "arrayVar" && types[1] == "variable") {

                  pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD", secondElementAddress);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();

                } else if (types[0] == "variable" && types[1] == "variable") {

                  pushCodeWithAddress("LOAD",  firstElementAddress);
                  pushCodeWithAddress("STORE", 2);

                  pushCodeWithAddress("LOAD", secondElementAddress);
                  pushCodeWithAddress("STORE", 3);

                  performMultiplication();
                }
             }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }

             } DIV value {

               secondElementAddress                   = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName          = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               performDataAssignForDIVAndMOD(
                 types[0], firstElementAddress,  firstElementName,  arrayIndexOfFirstElement, firstArrayIdentifierAddress,
                 types[1], secondElementAddress, secondElementName, currentArrayIndex,        secondArrayIdentifierAddress);

               performMODOrDIV();
               pushCodeWithAddress("LOAD", 5);

             }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }
             } MOD value {
               secondElementAddress             = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName    = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               performDataAssignForDIVAndMOD(
                 types[0], firstElementAddress,  firstElementName,  arrayIndexOfFirstElement, firstArrayIdentifierAddress,
                 types[1], secondElementAddress, secondElementName, currentArrayIndex,        secondArrayIdentifierAddress);

               performMODOrDIV();

               pushCodeWithAddress("LOAD", 4);
             }
;

condition    : value {
                expressionType[0]  = valueFormat1;
                expressionType2[0] = valueFormat2;

                firstElementAddress         = equationElementAddress;
                arrayIndexOfFirstElement    = currentArrayIndex;
                firstElementName            = variableNameGlobal;
                firstArrayIdentifierAddress = arrayIdentifierAddress;

                std::string variableTypes[4];
                variableTypes[0] = expressionType[0];
                variableTypes[1] = expressionType2[0];
                std::string type = determineDataType(variableTypes[0], variableTypes[1]);
                if (type == "number") {
                  pushCodeWithAddress("STORE", 2);
                }

              } EQ  value {

                secondElementAddress             = equationElementAddress;
                long long secondArrayIdentifierAddress = arrayIdentifierAddress;
                std::string secondElementName    = variableNameGlobal;
                long long arrayIndexOfSecondElement    = currentArrayIndex;

                std::string variableTypes[4];
                variableTypes[0] = expressionType[0];
                variableTypes[1] = expressionType2[0];
                variableTypes[2] = valueFormat1;
                variableTypes[3] = valueFormat2;

                std::string types[2];
                types[0] = determineDataType(variableTypes[0], variableTypes[1]);
                types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               computeElementsForEQAndNEQ(
                 types[0], firstElementAddress,  firstElementName,  arrayIndexOfFirstElement,  firstArrayIdentifierAddress,
                 types[1], secondElementAddress, secondElementName, arrayIndexOfSecondElement, secondArrayIdentifierAddress);

                pushCodeWithAddress("JZERO", numberOfCommands + 2);
                pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);
              }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }
             } NEQ value {

               secondElementAddress                   = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName          = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               computeElementsForEQAndNEQ(
                 types[0], firstElementAddress,  firstElementName,  arrayIndexOfFirstElement,  firstArrayIdentifierAddress,
                 types[1], secondElementAddress, secondElementName, arrayIndexOfSecondElement, secondArrayIdentifierAddress);

               pushCodeWithAddress("JZERO", JUMP_PLACEHOLDER_ADDRESS);

             }
             | value {

               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }
             } LT  value {
               secondElementAddress             = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName    = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", 2);
                 pushCode("INC");
                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "number" && types[1] == "variable") {

                pushCodeWithAddress("LOAD", 2);
                pushCode("INC");

                pushCodeWithAddress("SUB", secondElementAddress);

               } else if (types[0] == "variable" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", firstElementAddress);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);
                 pushCode("INC");
                 pushCodeWithAddress("SUB",   secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);
                 pushCode("INC");
                 pushCodeWithAddress("SUB", 3);


               } else if (types[0] == "number" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", 2);
                 pushCode("INC");
                 pushCodeWithAddress("SUB",   secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "array" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCode("INC");

                 pushCodeWithAddress("SUB", secondElementAddress);



               } else if (types[0] == "array" && types[1] == "array") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",   3);

               } else if (types[0] == "array" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",   3);


               } else if (types[0] == "array" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCode("INC");

                 pushCodeWithAddress("SUB", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "number" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  2);
                 pushCode("INC");
                 pushCodeWithAddress("SUB", 3);

               } else if (types[0] == "variable" && types[1] == "array") {

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOADI", 1);
                  pushCodeWithAddress("STORE", 3);

                  pushCodeWithAddress("LOAD", firstElementAddress);
                  pushCode("INC");
                  pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "arrayVar" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "variable" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", firstElementAddress);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",  secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",  secondElementAddress);

               } else if (types[0] == "variable" && types[1] == "variable") {
                 pushCodeWithAddress("LOAD", firstElementAddress);
                 pushCode("INC");

                 pushCodeWithAddress("SUB", secondElementAddress);
               }

               pushCodeWithAddress("JZERO", numberOfCommands + 2);
               pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);
             }
             | value {

               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }
             } GT value {

               secondElementAddress                   = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName          = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               if (types[0] == "number" && types[1] == "number") {

                 pushCode("INC");
                 pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "number" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCode("INC");
                 pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "variable" && types[1] == "number") {

                 pushCode("INC");
                 pushCodeWithAddress("SUB", firstElementAddress);

               } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                 pushCode("INC");

                 pushCodeWithAddress("SUB",  firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "number") {

                 pushCode("INC");
                 pushCodeWithAddress("SUB", firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "number" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                pushCode("INC");

                pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "array" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCode("INC");
                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "array" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOADI", 1);
                pushCodeWithAddress("STORE", 3);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOADI", 1);
                pushCode("INC");

                pushCodeWithAddress("SUB",   3);

               } else if (types[0] == "array" && types[1] == "number") {

                 pushCode("INC");
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 4);

                 pushCodeWithAddress("LOAD",  3);
                 pushCodeWithAddress("SUB",   4);

               } else if (types[0] == "array" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                 pushCode("INC");
                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "number" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCode("INC");

                 pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "variable" && types[1] == "array") {

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOADI", 1);
                  pushCode("INC");

                  pushCodeWithAddress("SUB",  firstElementAddress);

               } else if (types[0] == "arrayVar" && types[1] == "array") {

                 pushCodeWithAddress("LOAD", variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",  secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCode("INC");

                 pushCodeWithAddress("SUB", firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "variable" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                pushCode("INC");
                pushCodeWithAddress("SUB", firstElementAddress);

               } else if (types[0] == "arrayVar" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCode("INC");
                 pushCodeWithAddress("SUB", firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "variable" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCode("INC");
                 pushCodeWithAddress("SUB",  firstElementAddress);

               }

               pushCodeWithAddress("JZERO", numberOfCommands + 2);
               pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);

             }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }
              } LE value {

               secondElementAddress             = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName    = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", 2);
                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "number" && types[1] == "variable") {


                pushCodeWithAddress("LOAD", firstElementAddress);

                pushCodeWithAddress("SUB", secondElementAddress);

               } else if (types[0] == "variable" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", firstElementAddress);

                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB",   secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB", 3);


               } else if (types[0] == "number" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", 2);
                 pushCodeWithAddress("SUB",   secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "array" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);

                 pushCodeWithAddress("SUB", secondElementAddress);

               } else if (types[0] == "array" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);

                 pushCodeWithAddress("SUB",   3);

               } else if (types[0] == "array" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);

                 pushCodeWithAddress("SUB",   3);

               } else if (types[0] == "array" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);

                 pushCodeWithAddress("SUB", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "number" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  2);
                 pushCodeWithAddress("SUB", 3);

               } else if (types[0] == "variable" && types[1] == "array") {

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOADI", 1);
                  pushCodeWithAddress("STORE", 3);

                  pushCodeWithAddress("LOAD", firstElementAddress);
                  pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "arrayVar" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "variable" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", firstElementAddress);
                 pushCodeWithAddress("SUB",  secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

                 pushCodeWithAddress("SUB",  secondElementAddress);


               } else if (types[0] == "variable" && types[1] == "variable") {
                 pushCodeWithAddress("LOAD", firstElementAddress);
                 pushCodeWithAddress("SUB", secondElementAddress);
               }

               pushCodeWithAddress("JZERO", numberOfCommands + 2);
               pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);
             }

             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;

               firstElementAddress         = equationElementAddress;
               arrayIndexOfFirstElement    = currentArrayIndex;
               firstElementName            = variableNameGlobal;
               firstArrayIdentifierAddress = arrayIdentifierAddress;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               std::string type = determineDataType(variableTypes[0], variableTypes[1]);
               if (type == "number") {
                 pushCodeWithAddress("STORE", 2);
               }
             } GE value {

               secondElementAddress             = equationElementAddress;
               long long secondArrayIdentifierAddress = arrayIdentifierAddress;
               std::string secondElementName    = variableNameGlobal;
               long long arrayIndexOfSecondElement    = currentArrayIndex;

               std::string variableTypes[4];
               variableTypes[0] = expressionType[0];
               variableTypes[1] = expressionType2[0];
               variableTypes[2] = valueFormat1;
               variableTypes[3] = valueFormat2;

               std::string types[2];
               types[0] = determineDataType(variableTypes[0], variableTypes[1]);
               types[1] = determineDataType(variableTypes[2], variableTypes[3]);

               if (types[0] == "number" && types[1] == "number") {

                 pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "number" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "variable" && types[1] == "number") {

                 pushCodeWithAddress("SUB", firstElementAddress);

               } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB",  firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "arrayVar" && types[1] == "number") {

                 pushCodeWithAddress("SUB", firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "number" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "array" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "array" && types[1] == "array") {

                pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOADI", 1);
                pushCodeWithAddress("STORE", 3);

                pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                pushCodeWithAddress("STORE", 1);
                pushCodeWithAddress("LOADI", 1);

                pushCodeWithAddress("SUB",   3);

               } else if (types[0] == "array" && types[1] == "number") {

                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 4);

                 pushCodeWithAddress("LOAD",  3);
                 pushCodeWithAddress("SUB",   4);

               } else if (types[0] == "array" && types[1] == "arrayVar") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
                 pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);
                 pushCodeWithAddress("STORE", 3);

                 pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                 pushCodeWithAddress("SUB",  3);

               } else if (types[0] == "number" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);

                 pushCodeWithAddress("SUB", 2);

               } else if (types[0] == "variable" && types[1] == "array") {

                  pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                  pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                  pushCodeWithAddress("STORE", 1);
                  pushCodeWithAddress("LOADI", 1);

                  pushCodeWithAddress("SUB",  firstElementAddress);

               } else if (types[0] == "arrayVar" && types[1] == "array") {

                 pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
                 pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
                 pushCodeWithAddress("STORE", 1);
                 pushCodeWithAddress("LOADI", 1);

                 pushCodeWithAddress("SUB", firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "variable" && types[1] == "arrayVar") {

                pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
                pushCodeWithAddress("SUB", firstElementAddress);

               } else if (types[0] == "arrayVar" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD",  secondElementAddress);
                 pushCodeWithAddress("SUB", firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

               } else if (types[0] == "variable" && types[1] == "variable") {

                 pushCodeWithAddress("LOAD", secondElementAddress);
                 pushCodeWithAddress("SUB",  firstElementAddress);
               }

               pushCodeWithAddress("JZERO", numberOfCommands + 2);
               pushCodeWithAddress("JUMP",  JUMP_PLACEHOLDER_ADDRESS);

             }
;
value        : num {
                generateNumber($1);
                valueFormat1 = "number";
                valueFormat2 = "number";
             }
             | identifier {
               std::string variableName = $<string>1;

               if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Variable '" << variableName << "' is not declared! \n";
                  exit(1);
               } else {
                if(valueFormat2 != "array" && !isVariableInitialized(&initializedVariablesMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Variable '" << variableName << "' is declared but not initialized!\n";
                  exit(1);
                } else {

                }
               }
             }
;
identifier   : PID {
              valueFormat1 = "variable";
              valueFormat2 = "variable";
              std::string variableName = $1;
              variableNameGlobal = $1;

              if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                std::cerr << "Error [line "<< yylineno <<  "]: " << " variable '" << variableName << "' is not declared! \n";
                exit(1);
              } else {
                if (isVariableDeclared(&arraysMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Inappropriate use of '" << variableName <<"'! \n";
                  exit(1);
                }

                equationElementAddress = variablesAddressesMap[$1];
              }
            }
             | PID LEFT_BR PID RIGHT_BR {

              std::string variableName             = $1;
              std::string arrayAddressVariableName = $3;


              if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                std::cerr << "Error [line "<< yylineno <<  "]: " << "variable '" << variableName << "' is not declared! \n";
                exit(1);
              } else {

                if (!isVariableDeclared(&arraysMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Inappropriate use of '" << variableName << "'! \n";
                  exit(1);
                }

                if (!isVariableDeclared(&variablesAddressesMap, arrayAddressVariableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Trying to access array '"<< variableName << "' index via variable '" << arrayAddressVariableName << "' which is not declared! \n";
                  exit(1);
                }

                valueFormat1            = "array";
                valueFormat2            = "array";
                variableNameGlobal      = $1;
                equationElementAddress  = variablesAddressesMap[$1];
                arrayIdentifierAddress  = variablesAddressesMap[$3]; // is only an address of a variable, not a value!!!
              }

           }
             | PID LEFT_BR num RIGHT_BR {

              std::string variableName = $1;

              if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                std::cerr << "Error [line "<< yylineno <<  "]: "  << "variable '" << variableName << "' is not declared! \n";
                exit(1);
              } else {

                if (!isVariableDeclared(&arraysMap, variableName)) {
                  std::cerr << "Error [line "<< yylineno <<  "]: " << "Inappropriate use of '" << variableName << "'! \n";
                  exit(1);
                }

                valueFormat1 = "number";
                valueFormat2 = "array";

                variableNameGlobal = $1;

                currentArrayIndex = atoll($3);

                equationElementAddress = variablesAddressesMap[$1];
                long long searchedIndex = variablesAddressesMap[$1] + currentArrayIndex;
                equationElementAddress  = variablesAddressesMap[$1];
                arrayIdentifierAddress  = variablesAddressesMap[$3]; // is only an address of a variable, not a value!!!
              }
             }
;
%%

void declareAVariable(std::string name) {
  if (!isVariableDeclared(&variablesAddressesMap, name)) {
    currentMemoryIndex++;
    variablesAddressesMap[name] = currentMemoryIndex;
    initializedVariablesMap[name] = false;

  } else {
    std::cerr << "Error [line "<< yylineno <<  "]: "  << "Variable '" << name << "' already declared!" << "\n";
    exit(1);
  }
}

void displayArraySizesMap(std::map<std::string, long long>* arraySizesMap) {
  for(auto elem : *arraySizesMap) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

void declareAnArray(std::string name, long long arraySize) {
  if (!isVariableDeclared(&variablesAddressesMap, name)) {

    currentMemoryIndex++;

    long long arrayStartPoint = ++currentMemoryIndex;
    generateNumber(std::to_string(arrayStartPoint));
    pushCodeWithAddress("STORE", --arrayStartPoint);

    currentMemoryIndex = currentMemoryIndex - 1;
    variablesAddressesMap[name] = currentMemoryIndex; // the beggining of an array
    arraysMap[name] = arraySize;
    currentMemoryIndex =  currentMemoryIndex + arraySize; //without the first one

  } else {
    std::cerr << "Error [line "<< yylineno <<  "]: " << "Array " << name << " already defined!" << "\n";
    exit(1);
  }
}

bool isVariableDeclared(std::map<std::string, long long> *mapToSearch, std::string name) {
  if ( (*mapToSearch).find(name) == (*mapToSearch).end() ) {
    return false;
  } else {
    return true;
  }
}

void finish() {
  pushCode("HALT");
  displayCommandVector(&commandsVector);
}

void displayMap(std::map<std::string, int>* mapToDisplay) {
  for(auto elem : *mapToDisplay) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

void displayInitializedMap(std::map<std::string, bool>* map) {
  for(auto elem : *map) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

bool isVariableInitialized(std::map<std::string, bool>* initializedMap, std::string variableName) {
  if ( (*initializedMap).find(variableName) == (*initializedMap).end() ) { // not found
    return false;
  } else { // found
    if ((*initializedMap)[variableName] == true) { //initialized
      return true;
    } else { // not initialized
      return false;
    }
  }
}

void displayCommandVector(std::vector<std::string> *commands) {
  int vectorSize = commands->size();
  for (int i=0; i < vectorSize; i++) {
    std::cout << commands->at(i) << "\n";
  }
}

/*===================================================*/
/*                 GENERATING CODE                   */
/*===================================================*/

void pushCode(std::string opCode) {
  commandsVector.push_back(opCode);
  numberOfCommands++;
}

void pushCodeWithAddress(std::string opCode, int number) {
  std::string space = " ";
  std::string whole = opCode + space + std::to_string(number);
  commandsVector.push_back(whole);
  if (opCode == "JUMP" ) {
    if (number == JUMP_PLACEHOLDER_ADDRESS) {
      std::pair<int, int> newJumpPosition = std::make_pair(numberOfCommands, numberOfCommands);
      jumpStack.emplace(newJumpPosition);
    } else if (number == ELSE_PLACEHOLDER_ADDRESS) {
      elseStack.emplace(numberOfCommands);
    }
  } else if (opCode == "JZERO" && number == JUMP_PLACEHOLDER_ADDRESS) {
    std::pair<int, int> newJumpPosition = std::make_pair(numberOfCommands, numberOfCommands);
    jumpStack.emplace(newJumpPosition);
  }
  numberOfCommands++;
}

void performMultiplicationWithNumber(std::string number, long long variableAddress) {

  std::vector<long long> binaryRepresentationStack;
  long long decimalNumber  = std::stoi(number);

  binaryRepresentationStack = getBinaryRepresentation(decimalNumber);
  pushCode("ZERO");

  long long binaryNumberLength = binaryRepresentationStack.size();

  for(long long i = 0; i < binaryNumberLength; i++) {
    if (binaryRepresentationStack[i] == 1) {
      pushCodeWithAddress("ADD", variableAddress);
    }
    if (i < binaryNumberLength -1) {
      pushCode("SHL");
    }
  }
}

void computeElementsForEQAndNEQ(
   std::string firstType,  long long firstElementAddress,  std::string firstElementName,  long long arrayIndexOfFirstElement,  long long firstArrayIdentifierAddress,
   std::string secondType, long long secondElementAddress, std::string secondElementName, long long arrayIndexOfSecondElement, long long secondArrayIdentifierAddress) {

    std::string types[2];
    types[0] = firstType;
    types[1] = secondType;

  if (types[0] == "number" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);
    pushCodeWithAddress("LOAD",  2);
    pushCodeWithAddress("SUB",   3);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", 3);
    pushCodeWithAddress("SUB",  2);

    pushCodeWithAddress("ADD",   0);

  } else if (types[0] == "number" && types[1] == "variable") {

    //checking a - b
    pushCodeWithAddress("LOAD",  2);
    pushCodeWithAddress("SUB",   secondElementAddress);
    pushCodeWithAddress("STORE", 0);
    pushCodeWithAddress("LOAD", secondElementAddress);
    pushCodeWithAddress("SUB",  2);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "variable" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);
    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("SUB",   3);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", 3);
    pushCodeWithAddress("SUB",  firstElementAddress);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {
    // compute a - b
    pushCodeWithAddress("LOAD",  firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",   secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 0);

    //compute b - a
    pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",  firstElementAddress  + arrayIndexOfFirstElement  + ARRAY_INDEX_OFFSET);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "arrayVar" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",   3);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", 3);
    pushCodeWithAddress("SUB",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "number" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD",  2);
    pushCodeWithAddress("SUB",   secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB", 2);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "array" && types[1] == "variable") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);

    pushCodeWithAddress("STORE", 3);
    pushCodeWithAddress("LOAD",  3);

    pushCodeWithAddress("SUB",   secondElementAddress);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", secondElementAddress);
    pushCodeWithAddress("SUB",  3);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "array" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);

    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 2);
    pushCodeWithAddress("LOADI", 2);
    pushCodeWithAddress("STORE", 4);

    pushCodeWithAddress("LOAD",  3);
    pushCodeWithAddress("SUB",   4);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", 4);
    pushCodeWithAddress("SUB",  3);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "array" && types[1] == "number") {

    pushCodeWithAddress("STORE", 4);

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);

    pushCodeWithAddress("STORE", 3);
    pushCodeWithAddress("LOAD",  3);

    pushCodeWithAddress("SUB",   4);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", 4);
    pushCodeWithAddress("SUB",  3);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "array" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);
    pushCodeWithAddress("LOAD",  3);
    pushCodeWithAddress("SUB",  secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",  3);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "number" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  2);
    pushCodeWithAddress("SUB",   3);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD",  3);
    pushCodeWithAddress("SUB",   2);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "variable" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("SUB",   3);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD",  3);
    pushCodeWithAddress("SUB",   firstElementAddress);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "arrayVar" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",   3);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD",  3);
    pushCodeWithAddress("SUB",   firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "variable" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD", firstElementAddress);
    pushCodeWithAddress("SUB",  secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", secondElementAddress + arrayIndexOfSecondElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",  firstElementAddress);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "arrayVar" && types[1] == "variable") {

    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("SUB",   secondElementAddress);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD", secondElementAddress);
    pushCodeWithAddress("SUB",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);

    pushCodeWithAddress("ADD", 0);

  } else if (types[0] == "variable" && types[1] == "variable") {

    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("SUB",   secondElementAddress);
    pushCodeWithAddress("STORE", 0);

    pushCodeWithAddress("LOAD",  secondElementAddress);
    pushCodeWithAddress("SUB",   firstElementAddress);

    pushCodeWithAddress("ADD", 0);
  }
}

void performMultiplication() {
  /*
  [2] - a
  [3] - b
  [4] - c
  */

  pushCode("ZERO");
  pushCodeWithAddress("STORE", 4);

  int loop = numberOfCommands;
  pushCodeWithAddress("LOAD",  3);

  pushCodeWithAddress("JZERO", numberOfCommands + 14);

  pushCodeWithAddress("LOAD", 3);
  pushCodeWithAddress("JODD", numberOfCommands + 2);
  /* if b % 2 == 1 */
  pushCodeWithAddress("JUMP", numberOfCommands + 4);

  pushCodeWithAddress("LOAD",  4);
  pushCodeWithAddress("ADD",   2);
  pushCodeWithAddress("STORE", 4);
  /* c = c + a; */

  pushCodeWithAddress("LOAD", 3);
  pushCode("SHR");
  pushCodeWithAddress("STORE", 3);
  /* b = b / 2; */

  pushCodeWithAddress("LOAD", 2);
  pushCode("SHL");
  pushCodeWithAddress("STORE", 2);
  /* a = a * 2; */

  pushCodeWithAddress("JUMP", loop);
  pushCodeWithAddress("LOAD", 4);
}

std::vector<long long> getBinaryRepresentation(long long decimalNumber) {
  std::vector<long long> binaryRepresentationStack;

  while(decimalNumber > 0) {
    if (decimalNumber % 2 == 0) {
      binaryRepresentationStack.insert(binaryRepresentationStack.begin(), 0);
    } else {
      binaryRepresentationStack.insert(binaryRepresentationStack.begin(), 1);
    }
    decimalNumber = decimalNumber / 2;
  }
  return binaryRepresentationStack;
}

void generateNumber(std::string number) {

  std::vector<long long> binaryRepresentationStack;
  long long decimalNumber2 = std::stoi(number);
  long long decimalNumber  = std::stoi(number);

  binaryRepresentationStack = getBinaryRepresentation(decimalNumber);

  pushCode("ZERO");

  long long binaryNumberLength = binaryRepresentationStack.size();

  for(long long i = 0; i < binaryNumberLength; i++) {
    if (binaryRepresentationStack[i] == 1) {
      pushCode("INC");
    }
    if (i < binaryNumberLength -1) {
      pushCode("SHL");
    }
  }
}

void performDataAssignForDIVAndMOD(
  std::string firstType,  long long firstElementAddress,  std::string firstElementName,  long long arrayIndexOfFirstElement, long long firstArrayIdentifierAddress,
  std::string secondType, long long secondElementAddress, std::string secondElementName, long long currentArrayIndex,        long long secondArrayIdentifierAddress) {

  std::string types[2];
  types[0] = firstType;
  types[1] = secondType;

  if (types[0] == "number" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "number" && types[1] == "variable") {

    pushCodeWithAddress("LOAD", secondElementAddress);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "variable" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("STORE", 2);

  } else if (types[0] == "arrayVar" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "arrayVar" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);
    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 2);

  } else if (types[0] == "number" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "array" && types[1] == "variable") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD", secondElementAddress);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "array" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "array" && types[1] == "number") {

    pushCodeWithAddress("STORE", 3);

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 2);

  } else if (types[0] == "array" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[firstElementName]);
    pushCodeWithAddress("ADD",   firstArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",   secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "number" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "variable" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "arrayVar" && types[1] == "array") {

    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  variablesAddressesMap[secondElementName]);
    pushCodeWithAddress("ADD",   secondArrayIdentifierAddress);
    pushCodeWithAddress("STORE", 1);
    pushCodeWithAddress("LOADI", 1);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "variable" && types[1] == "arrayVar") {

    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  secondElementAddress + currentArrayIndex + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "arrayVar" && types[1] == "variable") {

    pushCodeWithAddress("LOAD",  firstElementAddress + arrayIndexOfFirstElement + ARRAY_INDEX_OFFSET);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  secondElementAddress);
    pushCodeWithAddress("STORE", 3);

  } else if (types[0] == "variable" && types[1] == "variable") {

    pushCodeWithAddress("LOAD",  firstElementAddress);
    pushCodeWithAddress("STORE", 2);

    pushCodeWithAddress("LOAD",  secondElementAddress);
    pushCodeWithAddress("STORE", 3);
  }
}

void performMODOrDIV() {

  pushCodeWithAddress("LOAD", 3);
  pushCodeWithAddress("JZERO", numberOfCommands + 39);
  pushCodeWithAddress("STORE", 7);
  /* aux = b */

  pushCode("ZERO");
  pushCodeWithAddress("STORE", 5);
  pushCodeWithAddress("STORE", 6);

  pushCodeWithAddress("LOAD",  2);
  pushCodeWithAddress("STORE", 4);

  int computeN = numberOfCommands;
  pushCodeWithAddress("LOAD",  7);
  pushCode("SHL");
  pushCodeWithAddress("STORE", 7);
  /* aux = aux << 1; */

  pushCodeWithAddress("LOAD",  6);
  pushCode("INC");
  pushCodeWithAddress("STORE", 6);
  /* n++; */

  pushCodeWithAddress("LOAD",  7);
  pushCodeWithAddress("SUB",   2);

  pushCodeWithAddress("JZERO", computeN);

  int secondLoop = numberOfCommands;

  pushCodeWithAddress("LOAD",  6);
  pushCodeWithAddress("JZERO", numberOfCommands + 21);
  /*n > 0 */

  pushCodeWithAddress("LOAD",  7);
  pushCode("SHR");
  pushCodeWithAddress("STORE", 7);
  /* aux = aux >> 1 */

  pushCodeWithAddress("LOAD",  6);
  pushCode("DEC");
  pushCodeWithAddress("STORE", 6);
  /* n-- */

  pushCodeWithAddress("LOAD",  5);
  pushCode("SHL");
  pushCodeWithAddress("STORE", 5);
  /* q = q << 1; */

  pushCodeWithAddress("LOAD",  7);
  pushCodeWithAddress("SUB",   4);
  pushCodeWithAddress("JZERO", numberOfCommands + 2);
  pushCodeWithAddress("JUMP",  numberOfCommands + 7);
  /* if (r >= aux) */

  pushCodeWithAddress("LOAD",  4);
  pushCodeWithAddress("SUB",   7);
  pushCodeWithAddress("STORE", 4);
  /* r = r - aux; */

  pushCodeWithAddress("LOAD",  5);
  pushCode("INC");
  pushCodeWithAddress("STORE", 5);

  pushCodeWithAddress("JUMP", secondLoop);
}

void changeJumpValue() {
  std::string placeholder = std::to_string(JUMP_PLACEHOLDER_ADDRESS);
  int jumpStackSize = jumpStack.size();

  std::pair<int,int> topElement = jumpStack.top();
  jumpStack.pop();
  int destinationAddress = topElement.first;
  int destinationValue   = numberOfCommands;

  int finishIndex                    = commandsVector[destinationAddress].length() - placeholder.length(); // JUMP_-3000, usuwam 5 ostatnich znaków i mam JUMP_[   ]
  std::string address                = std::to_string(destinationValue);
  commandsVector[destinationAddress] = commandsVector[destinationAddress].substr(0, finishIndex) + address;
}

void changeElseValue(int value) {
  std::string placeholder = std::to_string(JUMP_PLACEHOLDER_ADDRESS);

  if (elseStack.size() > 0) {
    int topElement = elseStack.top();
    elseStack.pop();
    int destinationAddress = topElement;
    int destinationValue   = value;

    int finishIndex                    = commandsVector[destinationAddress].length() - placeholder.length(); // JUMP_-3000, usuwam 5 ostatnich znaków i mam JUMP_[   ]
    std::string address                = std::to_string(destinationValue);
    commandsVector[destinationAddress] = commandsVector[destinationAddress].substr(0, finishIndex) + address;
  }
}

std::string determineDataType(std::string a, std::string b) {
  if (a == "number" && b == "number") {
    return "number";
  } else if(a == "variable" && b == "variable") {
    return "variable";
  } else if(a == "array" && b == "array") {
    return "array";
  } else {
    return "arrayVar"; //array with a number e.g. a[1]
  }
}

long long computeRequiredMemoryCell(std::string variableName, long long currentArrayIndex) {

  long long startingIndex = variablesAddressesMap[variableName];
  long long searchedIndex = startingIndex + currentArrayIndex;
  return searchedIndex + ARRAY_INDEX_OFFSET;
}

void freeAll() {

}

int main() {
  yyparse();
  return 0;
}

void yyerror (char *msg) {
    std::cerr << "Error [line "<< yylineno <<  "]: Syntax error!\n";
    exit(1);
}
