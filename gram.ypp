%{

  /* ========================================= */
  /*               NOTATKI                     */
  /* ========================================= */
  /*
    czy powinienem wyliczać offset raz czy na żądanie?



    [ ] inicjalizowanie tablic
  */


  // code
  // #include <stdio.h>
  // #include <stdlib.h>
  #include <cstdlib>
  #include <iostream>

  #include <cstring>
  #include <string>
  #include <map>
  #include <bitset>
  #include <vector>
  #include <stdio.h>
  #include <stdlib.h>

  extern "C" int yylex();
  extern "C" int yyparse();

  // variables
  /*===================================================*/
  /*                      CONSTANTS                    */
  /*===================================================*/

  #define NUMBER_OF_RESERVED_MEMORY_INDEXES 9
  #define ERROR_BUFFER 150

  /*===================================================*/
  /*                      VARIABLES                    */
  /*===================================================*/
  int currentMemoryIndex = NUMBER_OF_RESERVED_MEMORY_INDEXES;

  /*===================================================*/
  /*                     STRUCTURES                    */
  /*===================================================*/



  bool isDebugOn = false;

  int accumulator;
  int currentArrayIndex;
  char errorMessage[ERROR_BUFFER];


  std::string valueFormat1;
  std::string valueFormat2;
  std::string expressionType[2];
  std::string expressionType2[2];




  /*vector containing commands*/
	std::vector<std::string> commandsVector;

  /* declaredVariables */
  /* <nazwa, adres w pamięci> */
  std::map<std::string, int> variablesAddressesMap;

  /*
  tablice moge zapisywać jakoś w postaci
  [nazwa_tablicy]::[numer_komorki]
  */
  std::map<std::string, std::string> variableValueMap;

  /* each initialized variable */
  // <nazwa, czy zainicjalizowane>
  std::map<std::string, bool> initializedVariablesMap;

  /* each array's size */
  /* if a variable is in here then it's an array - useful when determining type of a data*/
  // <nazwa, rozmiar tablicy>
  std::map<std::string, int> arraysMap;


  // int yylex();
  void yyerror (char* msg);

  /*===================================================*/
  /*                      FUNCTIONS                    */
  /*===================================================*/

  // used for declaring a variable
  void declareAVariable(std::string name);
  // used for declaring an array
  void declareAnArray(std::string name, int arraySize);

  // function used for determining whether variable is declared
  bool isVariableDeclared(std::map<std::string, int> *mapToSearch, std::string name);

  bool isVariableInitialized(std::map<std::string, bool>* initializedMap, std::string variableName);

  // debug function performed at the end of parsing
  void finish();

  void displayMap(std::map<std::string, int>* mapToDisplay);
  void displayInitializedMap(std::map<std::string, bool>* map);
  void displayCommandVector(std::vector<std::string>* commandsVector);

  void showAllocatedMemoryIndexes();

  void pushCodeWithAddress(std::string opCode, int number);
  void pushCode(std::string opCode);

  void generateNumber(std::string);
  int computeRequiredMemoryCell(std::string variableName, int currentArrayIndex);

  std::string determineDataType(std::string, std::string);

%}

%union {
    char* string;
    int   num;
}

// program structure
%token VAR BEG END
// control statements
%token IF THEN ELSE ENDIF
//while loop
%token WHILE DO ENDWHILE
// for loop
%token FOR FROM TO ENDFOR DOWNTO
// IO
%token READ WRITE
// compare statements
%token ASSGN EQ NEQ GT GE LT LE
// operations
%token ADD SUB MUL DIV MOD
// numbers and variables
%token <string> num
%token <string> PID
%token SEM
// right and left brackets used for arrays
%token LEFT_BR RIGHT_BR


%left '-' '+'
%left '*' '/'
// where is modulo ???
%right '^' // do I need it?

%%

program         : VAR {/*showAllocatedMemoryIndexes();*/} vdeclarations BEG commands END {
                  finish();
                }

vdeclarations   : vdeclarations  PID {
                  declareAVariable($2);
                }

                | vdeclarations  PID LEFT_BR num RIGHT_BR {
                  int arraySize = atoi($4);
                  declareAnArray($2, arraySize);
                }
                | {
                  // std::cout << "No variables declared" << "\n";
                }
;

commands     : commands  command { }
             | command           { }
;

command      : identifier  ASSGN  expression SEM {
                std::string variableName = $<string>1;
                if (!isVariableDeclared(&variablesAddressesMap, variableName)) { //variable is not declared
                  std::cout << "Error [line "<< "]: Variable "<< $<string>1 <<" not declared!" << "\n";
                  exit(1);
                } else { // variable is declared
                  // find an adress
                  int variableAddress = variablesAddressesMap[variableName];
                  // set as initialized
                  initializedVariablesMap[variableName] = true;
                  pushCodeWithAddress("STORE", variableAddress);
                }
             }
             | IF  condition THEN  commands ELSE  commands  ENDIF {}
             | IF  condition  THEN  commands  ENDIF
             | WHILE  condition  DO  commands  ENDWHILE
             | FOR  PID  FROM  value TO  value DO  commands  ENDFOR
             | FOR  PID  FROM  value  DOWNTO  value DO  commands  ENDFOR
             | READ  identifier SEM {
               /*todo: doesn't work*/
               std::string variableName = $<string>2;
               if (!isVariableDeclared(&variablesAddressesMap, variableName)) { //variable is not declared
                 std::cout << "Error [line "<< "]: Variable "<< $<string>2 <<" not declared!" << "\n";
                 exit(1);
               } else {
                 int variableAddress = variablesAddressesMap[variableName];
                //  pushCodeWithAddress("STORE", variableAddress);
                 pushCode("ZERO");
                 pushCode("GET");

                 if (isVariableDeclared(&arraysMap, variableName)) {
                   if (isDebugOn) {
                     std::cout << "I'm an array!" << "\n";
                     std::cout << "Yet not implemented\n"<< currentArrayIndex;
                   }
                   int requiredCell = computeRequiredMemoryCell(variableName, currentArrayIndex);
                   //is variable initialized
                   pushCodeWithAddress("STORE", requiredCell);
                 } else {
                   int variableAddress = variablesAddressesMap[variableName];
                   // std::cout << "I'm a variable, with adress : "<< variableAddress <<"\n";
                   pushCodeWithAddress("STORE", variableAddress);
                   initializedVariablesMap[variableName] = true; // just in case we set it as initialized
                 }
               }
             }
             | WRITE value SEM {
               std::string variableName = $<string>2;

               if (isVariableDeclared(&variablesAddressesMap, variableName)) {
                 // at this point we know that variable is declared, what about being initialized?
                 int variableAddress = variablesAddressesMap[variableName];
                 //std::cout << "checking if " << variableName << " is initialized\n";
                 if (!isVariableInitialized(&initializedVariablesMap, variableName)) { //checking if it's initialized
                  std::cout << "Variable " << variableName << " not initialized\n";
                  exit(1);
                } else {
                  //std::cout << variableName << " is initialized\n"; //wrong message,
                   // pushCodeWithAddress("STORE", variableAddress);
                  if (isVariableDeclared(&arraysMap, variableName)) { // is it an array?
                    if (isDebugOn) {
                      std::cout << "I'm an array!" << "\n";
                      std::cout << "Yet not implemented\n"<< currentArrayIndex;
                      std::cout  << "\n";
                    }


                  } else {
                    pushCode("ZERO");
                    pushCodeWithAddress("LOAD", variableAddress);
                    pushCode("PUT");
                    pushCode("###");
                    // if it's an array
                  }
                }
               } else { //variable is not declared
                 std::cout << "Error [line "<< "]: Variable "<< $<string>2 <<" not declared!" << "\n";
                 exit(1);
               }
             }
;
expression   : value {
                /*
                if it's a number then load it directly to the accumulator
                otherwise find an adress and THEN load it
                */
                // pushCodeWithAddress("LOAD", 123);
                valueFormat1 = "number";
                valueFormat2 = "number";
              }
             | value {
               expressionType[0]  = valueFormat1;
               expressionType2[0] = valueFormat2;
             }
             ADD value {

              std::string variableTypes[4];
              variableTypes[0] = expressionType[0];
              variableTypes[1] = expressionType2[0];
              variableTypes[2] = valueFormat1;
              variableTypes[3] = valueFormat2;

              std::string types[2];
              types[0] = determineDataType(variableTypes[0], variableTypes[1]);
              types[1] = determineDataType(variableTypes[2], variableTypes[3]);

              if (types[0] == "number" && types[1] == "number") {
                std::cout << "both are numbers\n";
              } else if (types[0] == "array" && types[1] == "array") {
                std::cout << "both are arrays\n";
              }



             }
             | value SUB value { }
             | value MUL value { }
             | value DIV value { }
             | value MOD value { }
;
condition    : value EQ  value { }
             | value NEQ value { }
             | value LT  value { }
             | value GT  value { }
             | value LE  value { }
             | value GE  value { }
;
value        : num {
                generateNumber($1);
                valueFormat1 = "number";
                valueFormat2 = "number";
             }
             | identifier {
               std::string variableName = $<string>1;
               if (!isVariableDeclared(&variablesAddressesMap, variableName)) {
                 // not declared
                  std::cout << "variable " << variableName << " is not declared! \n";
                  exit(1);
               } else {
                 // variable is declared
                 if(!isVariableInitialized(&initializedVariablesMap, variableName)) {
                  std::cout << "Variable " << variableName << " declared but not initialized\n";
                  exit(1);
                } else {
                  // and initialized
                  // int variableAddress = variablesAddressesMap[variableName];
                  // std::cout << "variable '" << variableName << "' is declared and initialized\n";
                  // pushCode("ZERO");
                  //pushCodeWithAddress("LOAD [] ", variableAddress);
                }
               }
             }
;
identifier   : PID {
              valueFormat1 = "variable";
              valueFormat2 = "variable";
            }
             | PID LEFT_BR PID RIGHT_BR {

               /* yet to be implemented */
              /*
              // znalezc nazwe zmiennej
              // jej wartosc

              std::string variableName = $3;
              currentArrayIndex = toDecimal(variableValueMap[variableName]);
              */

              valueFormat1 = "array";
              valueFormat2 = "array";
           }
             | PID LEFT_BR num RIGHT_BR {
              currentArrayIndex = atoi($3);
              /*
              moze tutaj od razu obliczać offset?????

              */
              // pushCodeWithAddress("Current", currentArrayIndex);

              valueFormat1 = "number";
              valueFormat2 = "array";
             }
;
%%

void declareAVariable(std::string name) {
  if (!isVariableDeclared(&variablesAddressesMap, name)) {
    currentMemoryIndex++;
    variablesAddressesMap[name] = currentMemoryIndex;
    initializedVariablesMap[name] = false;
    // std::cout << "Declaring new variable: '" << name << "' with adress: " << currentMemoryIndex << "\n";
  } else {
    //throw an error
    std::cout << "Variable " << name << " already defined!" << "\n";
    exit(1);
    //snprintf(errorMessage, ERROR_BUFFER, "Variable '%s' already defined.", name);
    //yyerror(errorMessage);
  }
}

void displayArraySizesMap(std::map<std::string, int>* arraySizesMap) {
  for(auto elem : *arraySizesMap) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

void declareAnArray(std::string name, int arraySize) {
  if (!isVariableDeclared(&variablesAddressesMap, name)) {

    currentMemoryIndex++;
    if (isDebugOn) {
      std::cout << "Declaring new array     '" << name << "' of size: " << arraySize << " starting at memIndex " << currentMemoryIndex;
    }
    variablesAddressesMap[name] = currentMemoryIndex; // the beggining of an array
    initializedVariablesMap[name] = true;
    arraysMap[name] = arraySize;
    currentMemoryIndex += arraySize - 1; //without the first one
    if (isDebugOn) {
      std::cout << " and ending at " << currentMemoryIndex << "\n";
    }
  } else {
    std::cout << "Array " << name << " already defined!" << "\n";
    exit(1);
  }
}

bool isVariableDeclared(std::map<std::string, int> *mapToSearch, std::string name) {
  if ( (*mapToSearch).find(name) == (*mapToSearch).end() ) {
    // not found
    return false;
  } else {
    // found
    return true;
  }
}

void showAllocatedMemoryIndexes() {
  for (int i = 0; i < 10; i++) {
    std::cout << "index: " << i << " allocated for computing variables\n";
  }
  std::cout << "###################\n\n\n\n";
}

void finish() {
  //std::cout << "number of variables + tokens = " << variablesAddressesMap.size() << "\n";
  // displayMap(&variablesAddressesMap);
  pushCode("HALT");
  displayCommandVector(&commandsVector);
}

void displayMap(std::map<std::string, int>* mapToDisplay) {
  for(auto elem : *mapToDisplay) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

void displayInitializedMap(std::map<std::string, bool>* map) {
  for(auto elem : *map) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

bool isVariableInitialized(std::map<std::string, bool>* initializedMap, std::string variableName) {
  // mozna w sumie przerobic
  if ( (*initializedMap).find(variableName) == (*initializedMap).end() ) { // not found
    return false;
  } else { // found
    if ((*initializedMap)[variableName] == true) { //initialized
      return true;
    } else { // not initialized
      return false;
    }
  }
}

void displayCommandVector(std::vector<std::string> *commands) {
  int vectorSize = commands->size();
  for (int i=0; i < vectorSize; i++) {
    std::cout << commands->at(i) << "\n";
  }
}

/*===================================================*/
/*                 GENERATING CODE                   */
/*===================================================*/

void pushCode(std::string opCode) {
  commandsVector.push_back(opCode);
}

void pushCodeWithAddress(std::string opCode, int number) {
  std::string space = " ";
  std::string whole = opCode + space + std::to_string(number);
  commandsVector.push_back(whole);
}

void generateNumber(std::string number) {
  /*  ZAPISANIE liczby W PAMIĘCI
    1) wyzerowanie akumulatora
    2) wygenerowanie liczby (w akumulatorze)
    3) znalezenie komorki do ktorej mamy to zapisac - [x]
    4) STORE [x]
  */

  /*
  Dostajemy liczbę w postaci
  */

  int no = std::stoi(number);
  std::cout << "DEC: " << no << "\n";
  std::string bin = std::bitset<5>(no).to_string(); //to binary
  // should i trim it?
  //todo: trimming binary
  std::cout<< bin <<"\n";
  int limit = bin.length()-1;
  int i;
  pushCode("ZERO");

  for(i = 0; i < limit; ++i) {
    if(bin[i] == '1') {
      pushCode("INC");
    }
  //
    if(i < (limit - 1)) {
      pushCode("SHL");
    }
  }
}

std::string determineDataType(std::string a, std::string b) {
  if (a == "number" && b == "number") {
    return "number";
  } else if(a == "variable" && b == "variable") {
    return "variable";
  } else if(a == "array" && b == "array") {
    return "array";
  } else {
    return "arrayVar"; //array with a variable
  }
}


int computeRequiredMemoryCell(std::string variableName, int currentArrayIndex) {

  int startingIndex = variablesAddressesMap[variableName];
  int searchedIndex = startingIndex + currentArrayIndex;
  if (isDebugOn) {
    std::cout << "We start at index " << startingIndex << " looking for index " << searchedIndex << "\n";
  }
  return searchedIndex;
}

/*===================================================*/
/*                     STRUCTURES                    */
/*===================================================*/

void freeAll() {

}

int main() {
  yyparse();
  return 0;
}

void yyerror (char *msg) {
    printf("ERROR\n");
}
