%{
  // code
  // #include <stdio.h>
  // #include <stdlib.h>
  #include <cstdlib>
  #include <iostream>

  #include <string>
  #include <map>
  #include <vector>
  #include <stdio.h>
  #include <stdlib.h>

  extern "C" int yylex();
  extern "C" int yyparse();

  // variables
  /*===================================================*/
  /*                      CONSTANTS                    */
  /*===================================================*/

  #define NUMBER_OF_RESERVED_MEMORY_INDEXES 9
  #define ERROR_BUFFER 150

  /*===================================================*/
  /*                      VARIABLES                    */
  /*===================================================*/
  int currentMemoryIndex = NUMBER_OF_RESERVED_MEMORY_INDEXES;

  /*===================================================*/
  /*                     STRUCTURES                    */
  /*===================================================*/


  int accumulator;
  char errorMessage[ERROR_BUFFER];


  /*vector containing commands*/
	std::vector<std::string> commandsVector;

  /* declaredVariables */
  /* (name :: string, adress :: int) */
  /* (name :: string, pair of pointer and memory adress :: int) */
  std::map<std::string, int> variablesMap;

  /* each initialized variable */
  /* (name :: string, isInitialized :: boolean) */
  std::map<std::string, int> initializedVariablesMap;

  /* each array's size */
  /* if a variable is in here then it's an array - useful when determining type of a data*/
  /* (name :: string, arraySize :: int) */
  std::map<std::string, int> arraysMap;


  // int yylex();
  void yyerror (char* msg);



  /*===================================================*/
  /*                      FUNCTIONS                    */
  /*===================================================*/

  // used for declaring a variable
  void declareAVariable(std::string name);
  // used for declaring an array
  void declareAnArray(std::string name, int arraySize);

  // function used for determining whether variable is declared
  bool isVariableInMap(std::map<std::string, int> *mapToSearch, std::string name);

  // debug function performed at the end of parsing
  void finish();

  void displayMap(std::map<std::string, int>* mapToDisplay);
  void displayCommandVector(std::vector<std::string>* commandsVector);

  void showAllocatedMemoryIndexes();

  void pushCodeWithAddress(std::string opCode, int number);
  void pushCode(std::string opCode);


  void generateNumber(std::string);

%}

%union {
    char* string;
    int   num;
}

// program structure
%token VAR BEG END
// control statements
%token IF THEN ELSE ENDIF
//while loop
%token WHILE DO ENDWHILE
// for loop
%token FOR FROM TO ENDFOR DOWNTO
// IO
%token READ WRITE
// compare statements
%token ASSGN EQ NEQ GT GE LT LE
// operations
%token ADD SUB MUL DIV MOD
// numbers and variables
%token <string> num
%token <string> PID
%token SEM
// right and left brackets used for arrays
%token LEFT_BR RIGHT_BR


%left '-' '+'
%left '*' '/'
// where is modulo ???
%right '^' // do I need it?

%%

program         : VAR {showAllocatedMemoryIndexes();} vdeclarations BEG commands END {
                  finish();
                }

vdeclarations   : vdeclarations  PID {
                  declareAVariable($2);
                }

                | vdeclarations  PID LEFT_BR num RIGHT_BR {
                  int arraySize = atoi($4);
                  declareAnArray($2, arraySize);
                }
                | {
                  // std::cout << "No variables declared" << "\n";
                }
;

commands     : commands  command { }
             | command           { }
;

command      : identifier  ASSGN  expression SEM {
                std::string variableName = $<string>1;
                if (!isVariableInMap(&variablesMap, variableName)) { //variable is not declared
                  std::cout << "Error [line "<< "]: Variable "<< $<string>1 <<" not declared!" << "\n";
                  exit(1);
                } else {
                  int variableAddress = variablesMap[variableName];
                  initializedVariablesMap[variableName] = true;
                  pushCodeWithAddress("STORE", variableAddress);
                }
             }
             | IF  condition {} THEN  commands {}  ELSE  commands  ENDIF {}
             | IF  condition  THEN  commands  ENDIF
             | WHILE  condition  DO  commands  ENDWHILE
             | FOR  PID  FROM  value TO  value DO  commands  ENDFOR
             | FOR  PID  FROM  value  DOWNTO  value DO  commands  ENDFOR
             | READ  identifier SEM {
               /*todo: doesn't work*/
               std::string variableName = $<string>2;
               if (!isVariableInMap(&variablesMap, variableName)) { //variable is not declared
                 std::cout << "Error [line "<< "]: Variable "<< $<string>2 <<" not declared!" << "\n";
                 exit(1);
               } else {
                 int variableAddress = variablesMap[variableName];
                //  pushCodeWithAddress("STORE", variableAddress);
                 pushCode("GET");
                 if (isVariableInMap(&arraysMap, variableName)) {
                   std::cout << "I'm an array!" << "\n";
                 } else {
                   int variableAddress = variablesMap[variableName];
                   std::cout << "I'm a variable, with adress : "<< variableAddress <<"\n";
                 }
               }
             }
             | WRITE value SEM {
               std::string variableName = $<string>2;
               if (!isVariableInMap(&variablesMap, variableName)) { //variable is not declared
                 std::cout << "Error [line "<< "]: Variable "<< $<string>2 <<" not declared!" << "\n";
                 exit(1);
               } else {
                 int variableAddress = variablesMap[variableName];
                //  pushCodeWithAddress("STORE", variableAddress);
                 if (isVariableInMap(&arraysMap, variableName)) {
                   std::cout << "I'm an array!" << "\n";
                   std::cout << "Yet not implemented\n";
                 } else {
                   int variableAddress = variablesMap[variableName];
                   pushCodeWithAddress("LOAD", variableAddress);
                   pushCode("PUT");
                 }
               }
             }
;
expression   : value {
                /*
                if it's a number then load it directly to the accumulator
                otherwise find an adress and THEN load it
                */

                pushCodeWithAddress("LOAD", 123);
              }
             | value ADD value {}
             | value SUB value {}
             | value MUL value {}
             | value DIV value {}
             | value MOD value {}
;
condition    : value EQ value
             | value NEQ value
             | value LT  value
             | value GT  value
             | value LE  value
             | value GE  value
;
value        : num {
                generateNumber($1);
             }
             | identifier {
               std::string variableName = $<string>1;
               if (!isVariableInMap(&variablesMap, variableName)) { // not declared
                  std::cout << "variable " << variableName << " NOT \n";
               } else {
                 // variable is declared
                 if(isVariableInMap(&initializedVariablesMap, variableName)) {
                  std::cout << "Variable " << variableName << " declared but not initialized\n";
                  exit(1);
                } else {
                  std::cout << "variable " << variableName << " YES \n";
                }
               }
             }
;
identifier   : PID
             | PID LEFT_BR PID RIGHT_BR
             | PID LEFT_BR num RIGHT_BR
;
%%

void declareAVariable(std::string name) {
  if (!isVariableInMap(&variablesMap, name)) {
    currentMemoryIndex++;
    variablesMap[name] = currentMemoryIndex;
    initializedVariablesMap[name] = false;
    std::cout << "Declaring new variable: " << name << " with adress: " << currentMemoryIndex << "\n";
  } else {
    //throw an error
    std::cout << "Variable " << name << " already defined!" << "\n";
    exit(1);
    //snprintf(errorMessage, ERROR_BUFFER, "Variable '%s' already defined.", name);
    //yyerror(errorMessage);
  }
}

void displayArraySizesMap(std::map<std::string, int>* arraySizesMap) {
  std::cout << "\nMAP START" << "\n";
  for(auto elem : *arraySizesMap) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
  std::cout << "MAP END" << "\n";
}

void declareAnArray(std::string name, int arraySize) {
  if (!isVariableInMap(&variablesMap, name)) {

    currentMemoryIndex++;
    std::cout << "Declaring new array '" << name << "' of size: " << arraySize << " starting at memIndex " << currentMemoryIndex;

    variablesMap[name] = currentMemoryIndex; // the beggining of an array
    initializedVariablesMap[name] = true;
    arraysMap[name] = arraySize;
    currentMemoryIndex += arraySize - 1; //without the first one
    displayArraySizesMap(&arraysMap);
    std::cout << " and ending at " << currentMemoryIndex << "\n";
  } else {
    std::cout << "Array " << name << " already defined!" << "\n";
  }
}

bool isVariableInMap(std::map<std::string, int> *mapToSearch, std::string name) {
//  std::cout << "DEBUG" << "\n";

  if ( (*mapToSearch).find(name) == (*mapToSearch).end() ) {
    // not found
    return false;
  } else {
    // found
    return true;
  }
}

void showAllocatedMemoryIndexes() {
  for (int i = 0; i < 10; i++) {
    std::cout << "index: " << i << " allocated for computing variables\n";
  }
  std::cout << "###################\n\n\n\n";
}

void finish() {
  std::cout << "number of variables + tokens = " << variablesMap.size() << "\n";
  // displayMap(&variablesMap);

  pushCode("HALT");
  displayCommandVector(&commandsVector);
}

void displayMap(std::map<std::string, int>* mapToDisplay) {
  for(auto elem : *mapToDisplay) {
     std::cout << elem.first << " " << elem.second << "\n";
  }
}

void displayCommandVector(std::vector<std::string> *commands) {
  int vectorSize = commands->size();

  for (int i=0; i < vectorSize; i++) {
    std::cout << commands->at(i) << "\n";
  }
}

/*===================================================*/
/*                 GENERATING CODE                   */
/*===================================================*/

void pushCode(std::string opCode) {
  commandsVector.push_back(opCode);
}

void pushCodeWithAddress(std::string opCode, int number) {
  std::string space = " ";
  std::string whole = opCode + space + std::to_string(number);
  commandsVector.push_back(whole);
}

void generateNumber(std::string number) {
  std::string space = " ";
  std::string whole = "PICKLE" + space + number;
  commandsVector.push_back(whole);
}

int main() {
  yyparse();
  return 0;
}

void yyerror (char *msg) {
    printf("ERROR\n");
}
